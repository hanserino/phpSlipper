/*  ================================================================================
	Helpers
	Helpful classes and extentions  - more helpful global classes in .global.scss
================================================================================  */

$baseUnit: 8px;
$defaultGutterWidth: 20px;
$defaultSmallGutterWidth: 10px;
$mobileBreakPoint: 650px;


// Wrap a .ie8 or specificd version around the rule allowing for overriding for ie browsers
@mixin ie($version: 8) {
	.ie#{$version} & { @content; }
}

/* ========================================================================
#MEDIA QUERIES
========================================================================= */
@mixin device-size($size) {
	@if $size == small {
		@media (max-width: $mobileBreakPoint) { @content; }
	}
}


/*  ================================================================================
	HOVER
	Adds a hover rule to the current rule wrapped in the prefix html.notouch
	(or any class supplied using @include hover([class]) so touch devices
	(ahem iDevices) don't show the hover state on touch requiring
	two touches to activate the event
================================================================================  */
@mixin hover($class: hover) {
	html.#{$class} &:hover {
		@content;
	}
}

@mixin no-box-shadow(){
	@include box-shadow(0 0 0 transparent);
}

/*
Usage example:
@include hover(){
	background: red;
}
*/

/*  ================================================================================
	BROWSER SUPPORT

	Wraps current rule with a modernizr html prefix of supported properties or
	unsupported properties. To specify an array of properties provide a comma
	separated list wrapped in parentheses e.g. (property1, property2, property3)

	js					flexbox				canvas			canvastext
	webgl				touch				geolocation		postmessage
	websqldatabase		indexeddb			hashchange		history
	draganddrop			websockets			rgba			hsla
	multiplebgs			backgroundsize		borderimage		borderradius
	boxshadow			textshadow			opacity			cssanimations
	csscolumns			cssgradients		cssreflections
	csstransforms		csstransforms3d		csstransitions
	fontface			generatedcontent	video
	audio				localstorage		sessionstorage
	webworkers			applicationcache	svg
	inlinesvg			smil				svgclippaths

	Examples:

	Browsers with support for webgl:
		.rule {
			@include support(webgl){
				background: blue;
			}
		}

	Browsers with support for webgl svg and canvas:
		.rule {
			@include support((webgl, svg, canvas)){
				background: blue;
			}
		}

	Browsers without support for csstransitions cssreflections and cssanimations:
		.rule {
			@include support((csstransitions, cssreflections, cssanimations)){
				background: blue;
			}
		}

================================================================================  */
@mixin support($properties) {
	@each $property in $properties {
		html.#{$property} & {
			@content;
		}
	}
}

@mixin no-support($properties) {
	@each $property in $properties {
		html.no-#{$property} & {
			@content;
		}
	}
}


@function units($count) {
	@return $count * $baseUnit;
}

@mixin user-select($choice){
//	auto | none | text;
	-webkit-user-select: $choice;
	-khtml-user-select: $choice;
	-moz-user-select: $choice;
	-o-user-select: $choice;
	user-select: $choice;
}

@mixin max-width($maxWidth){
	max-width: $maxWidth;
	.lte-ie9 &{
		width: $maxWidth;
	}
}

/*  ================================================================================
	STYLE PLACEHOLDER TEXT IN INPUT FIELDS
================================================================================  */

@mixin placeholder-color($color){
	::-webkit-input-placeholder {
	   color: $color;
	}
	
	:-moz-placeholder { /* Firefox 18- */
	   color: $color;  
	}
	
	::-moz-placeholder {  /* Firefox 19+ */
	   color: $color;  
	}
	
	:-ms-input-placeholder {  
	   color: $color;  
	}
}


.clearfix{
	*zoom: 1;
	&:before,
	&:after{
		content: " ";
		display: table;
	}
	&:after{
		clear: both;
	}
}

@mixin clearfix(){
	@extend .clearfix;
}

/* Triangles ==================================================  */
/* Requires parent container to be relative positioned
* Usage example:
	.yourDiv::after{
 	@include triangleDown($triangleWidth,$triangleHeight,$fff);
}
*/

@mixin triangleDown($width, $height, $color) {
	content: "";
	width: 0;
	height: 0;
	background: transparent;
	border-style: solid;
	position: absolute;
	z-index: 2;
	left: 50%;
	margin-left: -$width;
	bottom: -$height;
	border-top: $height solid $color;
	border-right: $width solid transparent;
	border-bottom: 0px solid transparent;
	border-left: $width solid transparent;
}

@mixin triangleUp($width, $height, $color) {
	content: "";
	width: 0;
	height: 0;
	background: transparent;
	border-style: solid;
	position: absolute;
	left: 50%;
	z-index: 2;
	margin-left: -$width;
	top: -$height;
	border-top: 0px solid transparent;
	border-right: $width solid transparent;
	border-bottom: $height solid $color;
	border-left: $width solid transparent;
}


@mixin min-height($value){
	min-height: $value;
	.lte-ie9 &{height: $value;}
}
@mixin min-width($value){
	min-width: $value;
	.lte-ie9 &{width: $value;}
}

@mixin grayscale($value) {
	-webkit-filter: #{"grayscale(#{$value})"};
	-moz-filter: #{"grayscale(#{$value})"};
	filter:#{"grayscale(#{$value})"};
}


@mixin noJsFallback(){
	.no-js &{
		@content;
	}
}

/*  ================================================================================
	Fade in on document ready - with fallback
================================================================================  */
.fadeIn {
	@include transition-property(opacity);
	@extend .transitionDefaults;
	@include opacity(0);
	.fadeInReady & {
		@include opacity(1);
	}
	@include noJsFallback(){
		@include opacity(1);
	}
}


/*  ================================================================================
	BLOCK ELEMENT
================================================================================  */
/* Usage example: <div data-block-height="4" data-small-block-height="2"></div> */
[data-block-height]{
	display: block;
	width: 100%;
	@include clearfix;
}


$b: 15;
@while $b > 0 {
	[data-block-height="#{$b}"],
	.small [data-small-block-height="#{$b}"] {
		height: 10px * $b;
	}
	$b: $b - 1;
}

/*  =====================================================================================
	Simple grid system built on data-attributes
=========================================================================================  */
[data-columns]{
	width: 100%;
	display: block;
	@include clearfix;

	.box{
		@include inline-block;
		vertical-align: top;
		background: skyblue;
		margin-right: -3px;
		margin-top: units(2);

		@include device-size(small){
			margin-right: -4px;
			margin-top: units(1);
		}

		>div{
			display: block;
			background: salmon;
		}
	}
}

$columns: 20;
@while $columns > 0 {
	[data-columns="#{$columns}"],
	.small [data-mobile-columns="#{$columns}"]{
		.box{
			width: percentage(1/$columns);
			padding: 0 ($defaultGutterWidth/2) 0 ($defaultGutterWidth/2);
			&:nth-child(#{$columns}n+1){
				padding-left: 0px;
			}
			&:nth-child(#{$columns}n+#{$columns}){
				padding-right: 0px;
			}

		}
	}
	$columns: $columns - 1;
}